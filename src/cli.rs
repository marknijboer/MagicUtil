use clap::{command, crate_authors, Arg, ArgMatches, Command, ArgAction};

/// Matches the CLI arguments and returns an object containing the values.
pub fn match_cli_arguments() -> ArgMatches {
    command!()
        .version(env!("CARGO_PKG_VERSION"))
        .propagate_version(true)
        .subcommand_required(true)
        .arg_required_else_help(true)
        .about("Released under the MIT license.\n\nUseful utilities on a Samsung MagicINFO server for sysadmin tasks.")
        .author(crate_authors!("\n"))
        .subcommand(Command::new("system")
            .subcommand_required(true)
            .arg_required_else_help(true)
            .about("Query system properties used in MagicINFO")
            .subcommand(Command::new("hwunique")
                .about("Prints the hardware unique calculated from properties of this system")
                .arg(Arg::new("json")
                    .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("macaddress")
                .about("Prints the system's MAC address")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("boardid")
                .about("Prints the system's board ID")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("ipaddress")
                .about("Prints the system's local ipaddress")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
        )
        .subcommand(Command::new("info")
            .subcommand_required(true)
            .arg_required_else_help(true)
            .about("Utilities based on retrieving information from the system")
            .subcommand(Command::new("magicinfo")
                .about("Returns MagicINFO related information")
                .arg(Arg::new("json")
                    .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("database")
                .about("Returns information about the database")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("service")
                .about("Returns information about MagicINFO service")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("system")
                .about("Returns information about the system MagicINFO runs on")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
            .subcommand(Command::new("all")
                .about("Returns all useful information")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                ))
        )
        .subcommand(Command::new("service")
        .subcommand_required(true)
            .arg_required_else_help(true)
            .about("Utilities based on the MagicINFO Windows service")
            .subcommand(Command::new("status")
                .about("Returns the current service status")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the value as json")
                    .long("json")
                ))
            .subcommand(Command::new("start")
                .about("Stats the MagicINFO service")
                .arg(Arg::new("available")
                .action(ArgAction::SetTrue)
                    .help("Waits until the HTTP service is available")
                    .long("available")
                )
                .arg(Arg::new("silent")
                .action(ArgAction::SetTrue)
                    .help("Disables output to stdout")
                    .long("silent")
                )
            )
            .subcommand(Command::new("stop")
                .about("Stops the MagicINFO service")
                .arg(Arg::new("silent")
                .action(ArgAction::SetTrue)
                    .help("Disables output to stdout")
                    .long("silent")
                )
            )
            .subcommand(Command::new("restart")
                .about("Restarts the MagicINFO service")
                .arg(Arg::new("available")
                .action(ArgAction::SetTrue)
                    .help("Waits until the HTTP service is available")
                    .long("available")
                )
                .arg(Arg::new("silent")
                .action(ArgAction::SetTrue)
                    .help("Disables output to stdout")
                    .long("silent")
                )
            )
            .subcommand(Command::new("available")
                .about("Checks if the MagicINFO web interface is available")
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                )
            )
            .subcommand(Command::new("wait")
                .about("Waits until the MagicINFO application is running and accessible.")
                .arg(Arg::new("running")
                .action(ArgAction::SetTrue)
                    .alias("untilrunning")
                    .help("Waits until the MagicINFO service is running. It might not be available yet when it just started booting.")
                    .long("running")
                )
                .arg(Arg::new("available")
                    .alias("untilavailable")
                    .help("Waits until the MagicINFO service is available and serving via HTTP.")
                    .long("available")
                )
            )
        )
        .subcommand(Command::new("config")
            .subcommand_required(true)
            .arg_required_else_help(true)
            .about("Get, set, replace or remove properties from MagicINFO's main config.properties file")
            .subcommand(Command::new("get")
                .about("Returns one or more configuration properties")
                .arg(Arg::new("PROPERTY")
                    .required(true)
                    .num_args(1..)
                )
                .arg(Arg::new("json")
                .action(ArgAction::SetTrue)
                    .help("Setting this value returns the property values as json")
                    .long("json")
                )
                .arg(Arg::new("decrypt")
                .action(ArgAction::SetTrue)
                    .help("Setting this flag will try to decrypt the encrypted values")
                    .long("decrypt")
                )
            )
            .subcommand(Command::new("set")
                .about("Sets a configuration property")
                .arg(Arg::new("KEY")
                    .num_args(1)
                    .required(true)
                )
                .arg(Arg::new("VALUE")
                    .num_args(1)
                    .required(true)
                )
                .arg(Arg::new("encrypt")
                    .action(ArgAction::SetTrue)
                    .help("Setting this flag will encrypt the value before writing it to the config.properties file")
                    .long("encrypt")
                )
            )
            .subcommand(Command::new("remove")
                .about("Removes a configuration property")
                .arg(Arg::new("KEY")
                    .num_args(1)
                    .required(true)
                )
            )
            .subcommand(Command::new("replace")
                .about("Changes a configuration property by replacing part of the existing value")
                .arg(Arg::new("KEY")
                .num_args(1)
                .required(true)
                )
                .arg(Arg::new("SEARCH")
                .num_args(1)
                .required(true)
                )
                .arg(Arg::new("REPLACE")
                .num_args(1)
                .required(true)
                )
            )
        )
        .subcommand(Command::new("open")
            .about("Tries to open the given file")
            .arg(Arg::new("FILE")
            .num_args(1)
            .required(true)
            )
        )
        .subcommand(Command::new("tail")
            .about("Tries to tail and follow the given file")
            .arg(Arg::new("FILE")
            .num_args(1)
            .required(true)
            )
        )
        .subcommand(Command::new("bcrypt")
            .arg_required_else_help(true)
            .subcommand_required(true)
            .about("Utilities based on MagicINFO's bcrypt hashing algorithm used to store password")
            .subcommand(Command::new("hash")
                .about("Hashes the given plaintext with the bcrypt algorithm")
                .arg(Arg::new("PLAINTEXT")
                .num_args(1)
                .required(true)
                )
            )
        )
        .get_matches()
}
